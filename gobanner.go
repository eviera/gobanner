package main

import (
	"fmt"
	"bytes"
)

const START_ROW byte = 32
const DOT string = "*"
const BLANK string = " "

func main() {

 	letters := [95][13]byte {
		{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, //32
		{0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00}, //33
		{0x6C, 0x6C, 0x6C, 0x6C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, //34
		{0x00, 0x00, 0x66, 0x66, 0xFF, 0x66, 0x66, 0xFF, 0x66, 0x66, 0x00, 0x00, 0x00}, //35
		{0x18, 0x7E, 0xFF, 0x1B, 0x1F, 0x7E, 0xF8, 0xD8, 0xFF, 0x7E, 0x18, 0x00, 0x00}, //36
		{0x0E, 0x1B, 0xDB, 0x6E, 0x30, 0x18, 0x0C, 0x76, 0xDB, 0xD8, 0x70, 0x00, 0x00}, //37
		{0x1C, 0x36, 0x33, 0x33, 0x1B, 0x0E, 0x0E, 0x1B, 0xF3, 0x63, 0xFE, 0x00, 0x00}, //38
		{0x70, 0x30, 0x38, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, //39
		{0x30, 0x18, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x18, 0x30, 0x00, 0x00}, //40
		{0x0C, 0x18, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x18, 0x0C, 0x00, 0x00}, //41
		{0x00, 0x00, 0x99, 0x5A, 0x3C, 0xFF, 0x3C, 0x5A, 0x99, 0x00, 0x00, 0x00, 0x00}, //42
		{0x00, 0x00, 0x18, 0x18, 0x18, 0xFF, 0xFF, 0x18, 0x18, 0x18, 0x00, 0x00, 0x00}, //43
		{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x38, 0x18, 0x0C, 0x00, 0x00}, //44
		{0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, //45
		{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1C, 0x1C, 0x00, 0x00, 0x00}, //46
		{0xC0, 0xC0, 0x60, 0x60, 0x30, 0x30, 0x18, 0x18, 0x0C, 0x0C, 0x06, 0x06, 0x00}, //47
		{0x3C, 0x66, 0xC3, 0xE3, 0xF3, 0xDB, 0xCF, 0xC7, 0xC3, 0x66, 0x3C, 0x00, 0x00}, //48
		{0x18, 0x1C, 0x1E, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x7E, 0x00, 0x00}, //49
		{0x7E, 0xE7, 0xC0, 0x60, 0x30, 0x18, 0x0C, 0x06, 0x03, 0x03, 0xFF, 0x00, 0x00}, //50
		{0x7E, 0xE7, 0xC0, 0xC0, 0xE0, 0x7E, 0xE0, 0xC0, 0xC0, 0xE7, 0x7E, 0x00, 0x00}, //51
		{0x30, 0x38, 0x3C, 0x36, 0x33, 0xFF, 0x30, 0x30, 0x30, 0x30, 0x30, 0x00, 0x00}, //52
		{0xFF, 0x03, 0x03, 0x03, 0x03, 0x7F, 0xE0, 0xC0, 0xC0, 0xE7, 0x7E, 0x00, 0x00}, //53
		{0x7E, 0xE7, 0x03, 0x03, 0x03, 0x7F, 0xE3, 0xC3, 0xC3, 0xE7, 0x7E, 0x00, 0x00}, //54
		{0xFF, 0xC0, 0xC0, 0xC0, 0x60, 0x30, 0x18, 0x0C, 0x0C, 0x0C, 0x0C, 0x00, 0x00}, //55
		{0x7E, 0xE7, 0xC3, 0xC3, 0xE7, 0x7E, 0xE7, 0xC3, 0xC3, 0xE7, 0x7E, 0x00, 0x00}, //56
		{0x7E, 0xE7, 0xC3, 0xC3, 0xE7, 0xFE, 0xC0, 0xC0, 0xC0, 0xE7, 0x7E, 0x00, 0x00}, //57
		{0x00, 0x00, 0x00, 0x00, 0x1C, 0x1C, 0x00, 0x00, 0x1C, 0x1C, 0x00, 0x00, 0x00}, //58
		{0x00, 0x00, 0x00, 0x38, 0x38, 0x00, 0x00, 0x38, 0x38, 0x18, 0x0C, 0x00, 0x00}, //59
		{0x60, 0x30, 0x18, 0x0C, 0x06, 0x03, 0x06, 0x0C, 0x18, 0x30, 0x60, 0x00, 0x00}, //60
		{0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00}, //61
		{0x06, 0x0C, 0x18, 0x30, 0x60, 0xC0, 0x60, 0x30, 0x18, 0x0C, 0x06, 0x00, 0x00}, //62
		{0x7E, 0xC3, 0xC3, 0xC0, 0x60, 0x30, 0x18, 0x18, 0x00, 0x00, 0x18, 0x00, 0x00}, //63
		{0x00, 0x00, 0x00, 0x7E, 0xC3, 0xBB, 0xCB, 0xDB, 0xF3, 0x06, 0xFC, 0x00, 0x00}, //64
		{0x18, 0x3C, 0x66, 0xC3, 0xC3, 0xC3, 0xFF, 0xC3, 0xC3, 0xC3, 0xC3, 0x00, 0x00}, //65
		{0x7F, 0xE3, 0xC3, 0xC3, 0xE3, 0x7F, 0xE3, 0xC3, 0xC3, 0xE3, 0x7F, 0x00, 0x00}, //66
		{0x7E, 0xE7, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0xE7, 0x7E, 0x00, 0x00}, //67
		{0x3F, 0x73, 0xE3, 0xC3, 0xC3, 0xC3, 0xC3, 0xC3, 0xE3, 0x73, 0x3F, 0x00, 0x00}, //68
		{0xFF, 0x03, 0x03, 0x03, 0x03, 0x3F, 0x03, 0x03, 0x03, 0x03, 0xFF, 0x00, 0x00}, //69
		{0xFF, 0x03, 0x03, 0x03, 0x3F, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x00, 0x00}, //70
		{0x7E, 0xE7, 0x03, 0x03, 0x03, 0x03, 0xF3, 0xC3, 0xC3, 0xE7, 0x7E, 0x00, 0x00}, //71
		{0xC3, 0xC3, 0xC3, 0xC3, 0xC3, 0xFF, 0xC3, 0xC3, 0xC3, 0xC3, 0xC3, 0x00, 0x00}, //72
		{0x7E, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x7E, 0x00, 0x00}, //73
		{0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x63, 0x77, 0x3E, 0x00, 0x00}, //74
		{0xC3, 0x63, 0x33, 0x1B, 0x0F, 0x07, 0x0F, 0x1B, 0x33, 0x63, 0xC3, 0x00, 0x00}, //75
		{0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0xFF, 0x00, 0x00}, //76
		{0xC3, 0xE7, 0xFF, 0xFF, 0xDB, 0xC3, 0xC3, 0xC3, 0xC3, 0xC3, 0xC3, 0x00, 0x00}, //77
		{0xC7, 0xC7, 0xCF, 0xCF, 0xDF, 0xDB, 0xFB, 0xF3, 0xF3, 0xE3, 0xE3, 0x00, 0x00}, //78
		{0x7E, 0xE7, 0xC3, 0xC3, 0xC3, 0xC3, 0xC3, 0xC3, 0xC3, 0xE7, 0x7E, 0x00, 0x00}, //79
		{0x7F, 0xE3, 0xC3, 0xC3, 0xE3, 0x7F, 0x03, 0x03, 0x03, 0x03, 0x03, 0x00, 0x00}, //80
		{0x3C, 0x66, 0xC3, 0xC3, 0xC3, 0xC3, 0xC3, 0xDB, 0xFB, 0x76, 0xFC, 0x00, 0x00}, //81
		{0x7F, 0xE3, 0xC3, 0xC3, 0xE3, 0x7F, 0x0F, 0x1B, 0x33, 0x63, 0xC3, 0x00, 0x00}, //82
		{0x7E, 0xE7, 0x03, 0x03, 0x07, 0x7E, 0xE0, 0xC0, 0xC0, 0xE7, 0x7E, 0x00, 0x00}, //83
		{0xFF, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x00, 0x00}, //84
		{0xC3, 0xC3, 0xC3, 0xC3, 0xC3, 0xC3, 0xC3, 0xC3, 0xC3, 0xE7, 0x7E, 0x00, 0x00}, //85
		{0xC3, 0xC3, 0xC3, 0xC3, 0xC3, 0xC3, 0x66, 0x66, 0x3C, 0x3C, 0x18, 0x00, 0x00}, //86
		{0xC3, 0xC3, 0xC3, 0xC3, 0xC3, 0xDB, 0xDB, 0xFF, 0xFF, 0xE7, 0xC3, 0x00, 0x00}, //87
		{0xC3, 0x66, 0x66, 0x3C, 0x3C, 0x18, 0x3C, 0x3C, 0x66, 0x66, 0xC3, 0x00, 0x00}, //88
		{0xC3, 0x66, 0x66, 0x3C, 0x3C, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x00, 0x00}, //89
		{0xFF, 0xC0, 0xC0, 0x60, 0x30, 0x7E, 0x0C, 0x06, 0x03, 0x03, 0xFF, 0x00, 0x00}, //90
		{0x3C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x3C, 0x00, 0x00}, //91
		{0x06, 0x06, 0x0C, 0x0C, 0x18, 0x18, 0x30, 0x30, 0x60, 0x60, 0xC0, 0xC0, 0x00}, //92
		{0x3C, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x3C, 0x00, 0x00}, //93
		{0x18, 0x3C, 0x66, 0xC3, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, //94
		{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF}, //95
		{0x0E, 0x0C, 0x1C, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, //96
		{0x00, 0x00, 0x00, 0x00, 0x7E, 0xC3, 0xC0, 0xFE, 0xC3, 0xC3, 0xFE, 0x00, 0x00}, //97
		{0x03, 0x03, 0x03, 0x03, 0x03, 0x7F, 0xC3, 0xC3, 0xC3, 0xC3, 0x7F, 0x00, 0x00}, //98
		{0x00, 0x00, 0x00, 0x00, 0x7E, 0xC3, 0x03, 0x03, 0x03, 0xC3, 0x7E, 0x00, 0x00}, //99
		{0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xFE, 0xC3, 0xC3, 0xC3, 0xC3, 0xFE, 0x00, 0x00}, //100
		{0x00, 0x00, 0x00, 0x00, 0x7E, 0xC3, 0xC3, 0x7F, 0x03, 0x03, 0xFE, 0x00, 0x00}, //101
		{0x78, 0xCC, 0x0C, 0x0C, 0x0C, 0x3F, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x00, 0x00}, //102
		{0x00, 0x00, 0x00, 0x00, 0x7E, 0xC3, 0xC3, 0xC3, 0xFE, 0xC0, 0xC0, 0xC3, 0x7E}, //103
		{0x03, 0x03, 0x03, 0x03, 0x7F, 0xC3, 0xC3, 0xC3, 0xC3, 0xC3, 0xC3, 0x00, 0x00}, //104
		{0x00, 0x18, 0x00, 0x00, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x00, 0x00}, //105
		{0x00, 0x30, 0x00, 0x00, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x36, 0x1C}, //106
		{0x03, 0x03, 0x03, 0x03, 0x63, 0x33, 0x1B, 0x0F, 0x1F, 0x33, 0x63, 0x00, 0x00}, //107
		{0x1E, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x7E, 0x00, 0x00}, //108
		{0x00, 0x00, 0x00, 0x00, 0x7F, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0x00, 0x00}, //109
		{0x00, 0x00, 0x00, 0x00, 0x3F, 0x63, 0x63, 0x63, 0x63, 0x63, 0x63, 0x00, 0x00}, //110
		{0x00, 0x00, 0x00, 0x00, 0x3E, 0x63, 0x63, 0x63, 0x63, 0x63, 0x3E, 0x00, 0x00}, //111
		{0x00, 0x00, 0x00, 0x00, 0x7F, 0xC3, 0xC3, 0xC3, 0xC3, 0x7F, 0x03, 0x03, 0x03}, //112
		{0x00, 0x00, 0x00, 0x00, 0xFE, 0xC3, 0xC3, 0xC3, 0xC3, 0xFE, 0xC0, 0xC0, 0xC0}, //113
		{0x00, 0x00, 0x00, 0x00, 0x7F, 0x07, 0x03, 0x03, 0x03, 0x03, 0x03, 0x00, 0x00}, //114
		{0x00, 0x00, 0x00, 0x00, 0xFE, 0x03, 0x03, 0x7E, 0xC0, 0xC0, 0x7F, 0x00, 0x00}, //115
		{0x00, 0x0C, 0x0C, 0x0C, 0x3F, 0x0C, 0x0C, 0x0C, 0x0C, 0x6C, 0x38, 0x00, 0x00}, //116
		{0x00, 0x00, 0x00, 0x00, 0x63, 0x63, 0x63, 0x63, 0x63, 0x63, 0x7E, 0x00, 0x00}, //117
		{0x00, 0x00, 0x00, 0x00, 0xC3, 0xC3, 0x66, 0x66, 0x3C, 0x3C, 0x18, 0x00, 0x00}, //118
		{0x00, 0x00, 0x00, 0x00, 0xC3, 0xC3, 0xC3, 0xDB, 0xFF, 0xE7, 0xC3, 0x00, 0x00}, //119
		{0x00, 0x00, 0x00, 0x00, 0xC3, 0x66, 0x3C, 0x18, 0x3C, 0x66, 0xC3, 0x00, 0x00}, //120
		{0x00, 0x00, 0x00, 0x00, 0xC3, 0x66, 0x66, 0x3C, 0x18, 0x0C, 0x06, 0x06, 0x03}, //121
		{0x00, 0x00, 0x00, 0x00, 0xFF, 0x60, 0x30, 0x18, 0x0C, 0x06, 0xFF, 0x00, 0x00}, //122
		{0xF0, 0x18, 0x18, 0x18, 0x1C, 0x0F, 0x1C, 0x18, 0x18, 0x18, 0xF0, 0x00, 0x00}, //123
		{0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18}, //124
		{0x0F, 0x18, 0x18, 0x18, 0x38, 0xF0, 0x38, 0x18, 0x18, 0x18, 0x0F, 0x00, 0x00}, //125
		{0x00, 0x00, 0x00, 0x06, 0x8F, 0xF1, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, //126
	}

	input := "Emi"

	//Recorro la entrada
	for i:= range input  {
		//Por cada letra, busco la fila que le corresponde. Tengo que restarle 32 porque ahi empieza la serie (en el espacio)
		row := letters[input[i] - START_ROW];
		drawLetter(row)
		fmt.Printf("\n\n")
	}

}

func drawLetter(row [13]byte) {
	for i:=0; i < 13; i++ {
		var buffer bytes.Buffer
		row[i] = row[i]
		if (row[i] & 1   > 0) {buffer.WriteString(DOT)} else {buffer.WriteString(BLANK)}
		if (row[i] & 2   > 0) {buffer.WriteString(DOT)} else {buffer.WriteString(BLANK)}
		if (row[i] & 4   > 0) {buffer.WriteString(DOT)} else {buffer.WriteString(BLANK)}
		if (row[i] & 8   > 0) {buffer.WriteString(DOT)} else {buffer.WriteString(BLANK)}
		if (row[i] & 16  > 0) {buffer.WriteString(DOT)} else {buffer.WriteString(BLANK)}
		if (row[i] & 32  > 0) {buffer.WriteString(DOT)} else {buffer.WriteString(BLANK)}
		if (row[i] & 64  > 0) {buffer.WriteString(DOT)} else {buffer.WriteString(BLANK)}
		if (row[i] & 128 > 0) {buffer.WriteString(DOT)} else {buffer.WriteString(BLANK)}
		fmt.Println(buffer.String())
	}
}


/*
Considerar https://github.com/llgcode/draw2d
 */